{"version":3,"sources":["components/contactList/ContactList.module.css","components/contactEditorElement/ContactEditorElement.module.css","components/notification/Notification.module.css","components/filter/Filter.module.css","components/contactEditor/ContactEditor.module.css","components/App.module.css","redux/contacts/contactsSelectors.js","components/contactListItem/ContactListItem.js","redux/contacts/contactsAction.js","components/contactList/ContactList.js","redux/contacts/contactsOperation.js","components/filter/Filter.js","components/contactEditorElement/ContactEditorElement.js","components/notification/Notification.js","components/logo/Logo.js","components/contactEditor/ContactEditor.js","components/App.js","redux/contacts/contactsReducer.js","redux/store.js","index.js"],"names":["module","exports","getItems","state","contacts","items","getValue","filter","getLoading","loading","getFilteredContacts","createSelector","contact","name","toLowerCase","includes","ContactListItem","idx","number","id","onDelete","type","onClick","data-id","addContactRequest","createAction","addContactSuccess","addContactFailure","getAllContactsRequest","getAllContactsSuccess","getAllContactsFailure","deleteContactRequest","deleteContactSuccess","deleteContactFailure","getFilter","connect","contactsSelectors","dispatch","deleteContact","axios","delete","then","catch","error","deleteContactOperation","onHandleDelete","e","target","dataset","TransitionGroup","component","className","styles","contactData","map","CSSTransition","timeout","classNames","mapDispatchToProps","onChange","value","length","search","placeholder","ContactEditorElement","onHandelChange","form","onSubmit","Notification","isVisible","message","in","unmountOnExit","notification","Logo","initialState","ContactEditor","setState","handelSubmit","preventDefault","props","find","setTimeout","onAddForm","this","getContacts","appear","isLoadingContacts","Component","post","response","data","get","Object","keys","key","App","createReducer","action","payload","_","item","combineReducers","defaultMiddleware","getDefaultMiddleware","store","configureStore","reducer","contactsReducer","middleware","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7367958b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactList\":\"ContactList_contactList__D-c7d\",\"contactData\":\"ContactList_contactData__1SvS3\",\"enter\":\"ContactList_enter__3_AQI\",\"enterActive\":\"ContactList_enterActive__1He1A\",\"exit\":\"ContactList_exit__3rZxM\",\"exitActive\":\"ContactList_exitActive__3w-LP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contact\":\"ContactEditorElement_contact__1nDfH\",\"form\":\"ContactEditorElement_form__1G_ZG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"notification\":\"Notification_notification__3pF-Y\",\"enter\":\"Notification_enter__wWJLN\",\"enterActive\":\"Notification_enterActive__3SUrw\",\"exit\":\"Notification_exit__1Ywq7\",\"exitActive\":\"Notification_exitActive__37uFq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"search\":\"Filter_search__2h1N_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"appear\":\"ContactEditor_appear__11H-8\",\"appearActive\":\"ContactEditor_appearActive__2HYSd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"App_enter__rTMJ4\",\"enterActive\":\"App_enterActive__1yHy7\",\"exit\":\"App_exit__8XHlA\",\"exitActive\":\"App_exitActive__HOOvK\"};","import {createSelector} from '@reduxjs/toolkit'\r\n\r\nconst getLoading = state => state.contacts.loading;\r\nconst getItems = state => state.contacts.items;\r\nconst getValue = state => state.contacts.filter;\r\n\r\nconst getFilteredContacts = createSelector([getItems, getValue], (contacts, filter) => {\r\n    return contacts.filter(contact => contact.name.toLowerCase().includes(filter.toLowerCase()))\r\n})\r\n\r\n/*const getFilteredContacts = state => {\r\n    const filter = getValue(state).toLowerCase();\r\n    const contacts = getItems(state);\r\nreturn contacts.filter(contact => contact.name.toLowerCase().includes(filter))\r\n}*/\r\n\r\nexport default { getLoading, getItems, getValue, getFilteredContacts}","import React from 'react'\r\n\r\nconst ContactListItem = ({idx, number, name, id, onDelete}) => {\r\n    return (\r\n        <li>\r\n   <p>{idx+1}.  Name: {name}</p>\r\n   <p>  {number}</p>\r\n   <button type='button' onClick={onDelete} data-id={id}>x</button>\r\n   </li>\r\n    )\r\n}\r\n\r\nexport default ContactListItem\r\n","import { createAction } from '@reduxjs/toolkit';\r\n\r\n\r\n\r\nexport const addContactRequest = createAction('contacts/addRequest')\r\nexport const addContactSuccess = createAction('contacts/addSuccess')\r\nexport const addContactFailure = createAction('contacts/addFailure')\r\n\r\nexport const getAllContactsRequest = createAction('contacts/getRequest')\r\nexport const getAllContactsSuccess = createAction('contacts/getSuccess')\r\nexport const getAllContactsFailure = createAction('contacts/getFailure')\r\n/*export const addContactSuccess = createAction('contacts/addSuccess'/*, (contact) => ({\r\n    payload: contact\r\n    }))*/\r\nexport const deleteContactRequest = createAction('contacts/deleteRequest')\r\nexport const deleteContactSuccess = createAction('contacts/deleteSuccess')\r\nexport const deleteContactFailure = createAction('contacts/deleteFailure')\r\n/*export const addContact = createAction('contacts/add', (contact) => ({\r\n    payload: contact\r\n    }))*/\r\n\r\n/*export const deleteContact = createAction('contacts/delete')*/\r\nexport const getFilter = createAction('contacts/filter')\r\n/*export const getLocalContacts = createAction('contacts/localContacts')*/\r\n\r\n \r\n\r\n\r\n\r\n\r\n\r\n\r\n/*import { v4 as uuidv4 } from \"uuid\";\r\nimport contactActions from './contactsActionsTypes'\r\n\r\n  const addContact = (data) => ({\r\n    type: contactActions.ADD_CONTACT,\r\n    payload: {\r\n        ...data,\r\n        id: uuidv4(),\r\n    }\r\n    \r\n    })\r\n    export const deleteContact = id => ({\r\n        type: contactActions.DELETE_CONTACT,\r\n        payload: {\r\n            id,\r\n        }\r\n        \r\n        })\r\n       export const getFilter = value => ({\r\n            type: contactActions.FILTER_CONTACTS,\r\n            payload: {\r\n                value,\r\n            }\r\n            \r\n            })\r\n        const setAlert = () => ({\r\n            type: contactActions.SET_ALERT,   \r\n            })\r\n\r\n            \r\n   export default {\r\n    addContact,\r\n    setAlert\r\n    \r\n    \r\n   } */\r\n\r\n","import React from 'react'\r\nimport {connect} from 'react-redux'\r\nimport styles from './ContactList.module.css'\r\nimport PropTypes from 'prop-types';\r\nimport {CSSTransition, TransitionGroup} from 'react-transition-group';\r\nimport contactsSelectors from '../../redux/contacts/contactsSelectors'\r\nimport ContactListItem from '../contactListItem/ContactListItem'\r\nimport {deleteContactOperation} from '../../redux/contacts/contactsOperation'\r\n\r\n\r\nconst ContactList = ({contacts, deleteContact}) => {\r\n  const onHandleDelete = (e) => {\r\n    const  id  = e.target.dataset.id;\r\n    deleteContact(id)}\r\n  return (\r\n\r\n <TransitionGroup component='ul' className= {styles.contactData}>\r\n   {contacts.map(({id, name, number}, idx) => \r\n   <CSSTransition  key={id} timeout={1000} classNames={styles} > \r\n        <ContactListItem id={id} name={name} number={number} idx={idx} onDelete={onHandleDelete}/>    \r\n   </CSSTransition>\r\n   )}\r\n </TransitionGroup>\r\n)\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\ncontacts: contactsSelectors.getFilteredContacts(state)\r\n})\r\n \r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    deleteContact: (id) =>\r\n    {\r\n      dispatch(deleteContactOperation(id))\r\n    }\r\n\r\n  }\r\n}\r\n\r\n\r\nContactList.propTypes = {\r\n\tcontacts: PropTypes.array.isRequired,\r\n\tonDelete: PropTypes.func.isRequired\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n\r\n","import axios from 'axios'\r\nimport {addContactRequest, addContactFailure, addContactSuccess, getAllContactsRequest, \r\n    getAllContactsSuccess, getAllContactsFailure, deleteContactSuccess, deleteContactFailure, deleteContactRequest, toggleComplitedContactRequest, toggleComplitedContactSuccess, toggleComplitedContactFailure } from './contactsAction'\r\n\r\n\r\nconst addContactOperation = contact => dispatch => {\r\n    dispatch(addContactRequest())\r\n    axios.post('https://goit-react-hw-07-phonebo-9e664-default-rtdb.firebaseio.com/contacts.json', contact)\r\n    //axios.post(`${process.env.REDUX_BASE_URL}/contacts.json`, data)//\r\n    .then((response )=> dispatch(addContactSuccess({...contact, id:response.data.name}))\r\n)\r\n    .catch(error => dispatch(addContactFailure(error)))\r\n}\r\nconst getAllContactsOperation = () => dispatch => {\r\n    dispatch(getAllContactsRequest())\r\n    axios.get('https://goit-react-hw-07-phonebo-9e664-default-rtdb.firebaseio.com/contacts.json')\r\n    .then((response)=> \r\n    dispatch(getAllContactsSuccess(Object.keys(response.data).map(key=>({...response.data[key], id: key })))))\r\n    .catch(error => dispatch(getAllContactsFailure(error)))\r\n}\r\nconst deleteContactOperation = (id) => dispatch => {\r\n    dispatch(deleteContactRequest())\r\n    axios.delete(`https://goit-react-hw-07-phonebo-9e664-default-rtdb.firebaseio.com/contacts/${id}.json`)\r\n    .then(()=> dispatch(deleteContactSuccess(id)))\r\n    .catch(error => dispatch(deleteContactFailure(error)))\r\n}\r\n\r\n\r\nexport {addContactOperation, getAllContactsOperation, deleteContactOperation}","import React from 'react'\r\nimport {connect} from 'react-redux'\r\nimport styles from './Filter.module.css'\r\nimport PropTypes from 'prop-types';\r\nimport {getFilter} from '../../redux/contacts/contactsAction'\r\nimport contactsSelectors from '../../redux/contacts/contactsSelectors'\r\n\r\nconst Filter = ({items, value, onChange}) => {\r\n    \r\n    return (\r\n        <div>\r\n            {items.length >= 1 && <input className ={styles.search} type='text' value={value} placeholder=\"Search by name\"\r\n             onChange={e => onChange(e.target.value)}/>}\r\n        </div>   )\r\n}\r\nconst mapStateToProps = state => ({\r\n    value: contactsSelectors.getValue(state),\r\n    items: contactsSelectors.getItems(state)\r\n})\r\nconst mapDispatchToProps = {\r\n    onChange: getFilter,\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter)\r\n\r\nFilter.propTypes = {\r\n    value: PropTypes.string.isRequired,\r\n    onChange: PropTypes.func.isRequired\r\n};","import React from 'react'\r\nimport styles from './ContactEditorElement.module.css'\r\n\r\n\r\nconst ContactEditorElement = ({name, number, onChange, onHandelChange}) => {\r\n\r\n  \r\n      return (\r\n     \r\n        <div className={styles.contact}>         \r\n      <form className={styles.form} onSubmit={onChange}>\r\n        <label> \r\n        <input type='text' name='name' value={name } placeholder='Name'\r\n        onChange={onHandelChange}/> \r\n          </label>\r\n          <label> \r\n         <input type='tel' name='number' value={number }  placeholder='Number'\r\n        onChange={onHandelChange}/> \r\n        </label>\r\n        <button type=\"submit\">Add contact </button>\r\n      </form>   \r\n            </div>\r\n       \r\n\r\n    ) \r\n       \r\n}\r\nexport default  ContactEditorElement\r\n\r\n","import React from 'react'\r\nimport styles from './Notification.module.css'\r\nimport { CSSTransition } from 'react-transition-group'\r\n\r\nconst Notification = ({isVisible, message}) => {\r\n    return (\r\n        <CSSTransition\r\n        in={isVisible}\r\n        timeout = {250}\r\n        classNames={styles}\r\n        unmountOnExit>\r\n        <div className={styles.notification} >\r\n        {message}\r\n        </div>\r\n        </CSSTransition>\r\n        \r\n    )\r\n}\r\n\r\nexport default Notification\r\n","import React from 'react'\r\n\r\nconst Logo = () => {\r\n    return (\r\n        <h2 className='title'>\r\n            PHONEBOOK\r\n        </h2>\r\n    )\r\n}\r\n\r\nexport default Logo\r\n","import React, { Component } from 'react'\r\nimport { CSSTransition } from 'react-transition-group'\r\nimport ContactEditorElement from '../contactEditorElement/ContactEditorElement'\r\nimport {connect} from 'react-redux'\r\nimport styles from '../contactEditor/ContactEditor.module.css'\r\nimport { addContactOperation, getAllContactsOperation} from '../../redux/contacts/contactsOperation'\r\nimport contactsSelectors from '../../redux/contacts/contactsSelectors'\r\nimport Notification from '../../components/notification/Notification'\r\nimport Logo from '../logo/Logo'\r\n\r\n\r\nconst initialState = {\r\n  name: '',\r\n  number: '',\r\n \r\n}\r\n\r\n class ContactEditor extends Component {\r\n    state = {...initialState}\r\n    /*state ={isVisible: false, message:''}*/\r\n\r\n    componentDidMount() {\r\n      \r\n    \r\n          this.props.getContacts()\r\n         }\r\n    onHandelChange = (e) => {\r\n      const {name, value} = e.target\r\n      this.setState({[name]: value})\r\n    }\r\n      \r\n    handelSubmit = (e) => {\r\n    e.preventDefault();\r\n   const search =this.props.items.find(contact => contact.name === this.state.name);\r\n    if (search) \r\n      {setTimeout(()=>this.setState({isVisible: true,  message:'Contact already exists'}), 500)\r\n        setTimeout(()=>this.setState({isVisible: false}), 2000)\r\n        this.setState({...initialState})\r\n      }\r\n    else if (!this.state.name.length){\r\n      setTimeout(()=>this.setState({isVisible: true, message:'Fill name field'}), 500)\r\n        setTimeout(()=>this.setState({isVisible: false}), 3000)\r\n        this.setState({...initialState})\r\n    }\r\n    else if (!this.state.number.length){\r\n      setTimeout(()=>this.setState({isVisible: true, message:'Fill number field'}), 500)\r\n        setTimeout(()=>this.setState({isVisible: false}), 3000)\r\n        this.setState({...initialState})\r\n    }\r\n    else {\r\n      \r\n      this.props.onAddForm(this.state)\r\n      this.setState({...initialState})\r\n      }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n          <>\r\n          <Notification isVisible={this.state.isVisible} message = {this.state.message}/>\r\n          <CSSTransition\r\n           in={true}\r\n           appear={true}\r\n           classNames={styles}\r\n           timeout={500}\r\n           unmountOnExit> \r\n           <Logo/>\r\n           \r\n           </CSSTransition>\r\n            {this.props.error && <h2>ERROR.</h2>} \r\n           {this.props.isLoadingContacts && <h2>Loading...</h2>}\r\n          <ContactEditorElement name={this.state.name} number={this.state.number} \r\n          onChange={this.handelSubmit} onHandelChange={this.onHandelChange}/>\r\n           </>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapPropsToState = state => ({\r\n  items: contactsSelectors.getItems(state),\r\n  isLoadingContacts: contactsSelectors.getLoading(state),\r\n  error: state.contacts.error,\r\n})\r\n\r\nconst mapDispatchToProps = {\r\n  onAddForm: addContactOperation,\r\n  getContacts: getAllContactsOperation,\r\n}\r\n\r\n\r\nexport default  connect(mapPropsToState, mapDispatchToProps)(ContactEditor)\r\n\r\n\r\n\r\n\r\n\r\n\r\n////////////////////////////////////////////////////////////////\r\n\r\n\r\n/*import React, { useState } from 'react'\r\nimport { CSSTransition } from 'react-transition-group'\r\nimport {connect} from 'react-redux'\r\nimport ContactEditorElement from '../contactEditorElement/ContactEditorElement'\r\nimport Logo from '../logo/Logo'\r\nimport styles from '../contactEditor/ContactEditor.module.css'\r\nimport contactsAction from '../../redux/contacts/contactsAction'\r\n\r\nconst initialState = {\r\n  name: '',\r\n  number: '',\r\n}\r\n\r\nconst ContactEditor = ({onAddForm}) => {\r\n\r\nconst[state, setState] = useState({...initialState})  \r\n\r\n    const onHandelChange = (e) => {\r\n        const {name} = e.target\r\n        setState({...state, [name]: e.target.value})\r\n      }\r\n      \r\n  const  handelSubmit = (e) => {\r\n    e.preventDefault();\r\n    \r\n   onAddForm({name: state.name, number: state.number})\r\n    setState({...initialState})\r\n    }\r\n    \r\n  \r\n        return (\r\n          <div className={styles.phoneBook}>\r\n          <CSSTransition\r\n           in={true}\r\n           appear={true}\r\n           classNames={styles}\r\n           timeout={500}\r\n           unmountOnExit\r\n           > \r\n           <Logo/>\r\n           </CSSTransition>\r\n          <ContactEditorElement name={state.name} number={state.number} \r\n          onChange={handelSubmit} onHandelChange={onHandelChange}/>\r\n            </div>   \r\n        )\r\n    \r\n}*/\r\n\r\n/*const mapDispatchToProps = dispatch => {\r\n  return {\r\n    onAddForm: (name, number) => dispatch(contactsAction.addContact(name, number))\r\n  }\r\n\r\n}*/\r\n\r\n\r\n\r\n\r\n","\nimport React from 'react'\nimport ContactList from './contactList/ContactList'\nimport Filter from './filter/Filter'\nimport ContactEditor from './contactEditor/ContactEditor'\nimport { CSSTransition } from 'react-transition-group'\nimport styles from './App.module.css'\n\n\n\n \n  const App = () => {\n\n\n    return (\n      <div className='layout'>\n      <ContactEditor/>\n\n      <CSSTransition\n      in={true}\n      timeout={3000}\n      classNames={styles}\n      unmountOnExit>\n        <Filter/>\n      </CSSTransition>\n      \n      <ContactList/>\n      \n      </div>\n    )\n\n}\n\nexport default App\n\n\n\n\n///////////////////////////////////////////////////\n\n\n\n\n\n\n\n/*import React, { Component } from 'react'\nimport { v4 as uuidv4 } from \"uuid\";\nimport ContactList from './contactList/ContactList'\nimport Filter from './filter/Filter'\nimport ContactEditor from './contactEditor/ContactEditor'\n\nexport default class App extends Component {\n  state = {\n    contacts: [],\n    filter:'', \n  }\n  \n  componentDidMount() {\n    if (localStorage.getItem('contacts')) \n    {this.setState({contacts: JSON.parse(localStorage.getItem('contacts'))})}\n  }\n  \n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.contacts !== this.state.contacts) {\n    localStorage.setItem('contacts', JSON.stringify(this.state.contacts))}\n    }\n    \n\n  setFilter = (e) => {\n    this.setState({filter: e.target.value})\n  }\n  filterContact =() => {\n    const {contacts, filter} = this.state\n    return contacts.filter(contact => \n      contact.name.toLowerCase().includes(filter.toLowerCase()))\n    }\n  \n \n  addContact = (name, number) => {\n    const searchName = this.state.contacts.map((contact) => contact.name).includes(name)\n    if(searchName) {alert(`${name} is already in contacts`)} \n    else {\n    const contact = {\n      id: uuidv4(),\n      name,\n      number\n    }\n    this.setState(prevState => {\n      return{ contacts: [...prevState.contacts, contact]}})\n    }\n  }\n\n  deleteContact = (id) => {\n    this.setState(prevState => {\n      return {\n        contacts: prevState.contacts.filter(contact=> contact.id !== id) \n      }})\n  }\n  render() {\n    const filtredContact = this.filterContact();\n    return (\n      <>\n      <ContactEditor onAddForm={this.addContact}/>\n      {this.state.contacts.length && <Filter value={this.state.filter} onChange={this.setFilter}/>}\n     {this.state.contacts.length && <ContactList contacts= {filtredContact} onDelete={this.deleteContact}/> }\n      \n      </>\n    )\n}\n}\n*/","import { createReducer } from '@reduxjs/toolkit';\r\nimport {combineReducers} from 'redux'\r\nimport { getFilter,  addContactSuccess, addContactFailure, addContactRequest, getAllContactsRequest,\r\n   getAllContactsSuccess, getAllContactsFailure, deleteContactSuccess, deleteContactFailure, deleteContactRequest, \r\n   } from './contactsAction'\r\n\r\n\r\nconst items = createReducer ([], {\r\n[addContactSuccess]: (state, action) =>\r\n   { \r\nreturn [...state, action.payload]\r\n},\r\n[getAllContactsSuccess]: (_, action) => action.payload\r\n   \r\n/*return [...action.payload]*/\r\n\r\n,\r\n[deleteContactSuccess]: (state, action) =>{\r\nreturn state.filter(item=> item.id !== action.payload)\r\n},\r\n      \r\n})\r\nconst loading = createReducer(false,  {\r\n  [addContactRequest]: () => true,\r\n  [addContactSuccess]: () => false,\r\n  [addContactFailure]: () => false,\r\n\r\n  [getAllContactsRequest]: () => true,\r\n  [getAllContactsSuccess]: () => false,\r\n  [getAllContactsFailure]: () => false,\r\n\r\n  [deleteContactRequest]: () => true,\r\n  [deleteContactSuccess]: () => false,\r\n  [deleteContactFailure]: () => false,\r\n\r\n  \r\n\r\n})\r\n\r\nconst error = createReducer(null,  {\r\n  [addContactFailure]: (state, {payload}) =>\r\n  { \r\nreturn error ? payload : null\r\n},\r\n \r\n\r\n  [getAllContactsFailure]:  (state, {payload}) =>\r\n  { \r\nreturn error ? payload : null\r\n},\r\n\r\n  [deleteContactFailure]: (state, {payload}) =>\r\n  { \r\nreturn error ? payload : null\r\n},\r\n})\r\n\r\nconst filter = createReducer('',  {\r\n    [getFilter]: (_, action) =>\r\n     {return action.payload}\r\n       \r\n})\r\n\r\nexport default combineReducers({\r\n    items: items,\r\n    loading: loading,\r\n    filter: filter,\r\n    error: error\r\n  \r\n  \r\n})\r\n\r\n\r\n\r\n\r\n\r\n\r\n///////////////////////////////////////////////////////\r\n\r\n\r\n/*import {combineReducers} from 'redux'\r\nimport actionsTypes from './contactsActionsTypes'\r\nconst items = (state=[], {type, payload}) => {\r\n    switch (type) {\r\n        case actionsTypes.ADD_CONTACT:\r\n            localStorage.setItem('contacts', JSON.stringify([...state, payload]));\r\n            /*if (localStorage.getItem('contacts')) ({\r\n                 [...state, JSON.parse(localStorage.getItem('contacts'))],\r\n                })*/\r\n            \r\n           /*if (\r\n                state.some(\r\n                  (item) => item.name === payload.name\r\n                )\r\n              ) {\r\n                return  [...state]/*, (state.contacts.alert: !state.contacts.alert)}*/\r\n              /*}else*/\r\n           /* return [...state, payload];\r\n        case actionsTypes.DELETE_CONTACT:\r\n            return  state.filter(item=> item.id !== payload.id); \r\n        default:\r\n           return state;\r\n    }\r\n}\r\n\r\n\r\nconst filter = (state='', {type, payload}) => {\r\n    switch (type) {\r\n        case actionsTypes.FILTER_CONTACTS:\r\n            return payload.value\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n/*const alert = (state=false, {type, payload}) => {\r\n    switch (type) {\r\n        case actionsTypes.SET_ALERT:\r\n            return {...state, alert: !state}\r\n        default:\r\n            return state;\r\n    }\r\n}*/\r\n\r\n/*export default combineReducers({\r\n    items: items,\r\n   /* alert: alert,*/\r\n    /*filter: filter,\r\n  \r\n})\r\n\r\n \r\n\r\n/*\r\n{\r\n  contacts: {\r\n    items: [],\r\n    filter: ''\r\n  }\r\n}\r\n\r\n\r\n  useEffect (() => {\r\n   localStorage.getItem('contacts') && setContacts(JSON.parse(localStorage.getItem('contacts')))\r\n  }, []);\r\n  \r\n\r\n useEffect (() => {\r\n    localStorage.setItem('contacts', JSON.stringify(contacts))\r\n    }, [contacts])\r\n    \r\n\r\n  const getFilter = (e) => {\r\n    setFilter(e.target.value)\r\n  }\r\n  const filterContacts =() => {\r\n    return [...contacts.filter(item => \r\n      item.name.toLowerCase().includes(filter.toLowerCase()))]\r\n    }\r\n\r\n \r\n  const addContact = item => {\r\n    const searchName = contacts.map(contact => contact.name).includes(item.name)\r\n    if(searchName) {setTimeout(()=>setIsVisible(true), 500)\r\n    setTimeout(()=>setIsVisible(false), 2000)}\r\n    else {\r\n    setContacts([...contacts, {id: uuidv4(), ...item}])\r\n    \r\n    }\r\n  }\r\n  \r\n  const deleteContact = (e) => {\r\n    const id = e.target.dataset.id;\r\n    setContacts(\r\n      [...contacts.filter(contact=> contact.id !== id) \r\n    ])\r\n  }*/","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport contactsReducer from './contacts/contactsReducer'\r\n\r\nconst defaultMiddleware = getDefaultMiddleware();\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: contactsReducer,\r\n  },\r\n  middleware: [...defaultMiddleware]\r\n});\r\n\r\nexport default store;\r\n\r\n\r\n\r\n\r\n/*import {combineReducers, createStore} from 'redux'\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\nimport contactsReducer from './contacts/contactsReducer'\r\n\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    contacts: contactsReducer,\r\n})\r\nconst store = createStore(rootReducer, composeWithDevTools())\r\n\r\nexport default store;\r\n\r\n/* const [contacts, setContacts] = useState([])\r\n  const [filter, setFilter] = useState('')\r\n  const [isVisible, setIsVisible] = useState(false);*/","import React from 'react';\nimport {Provider} from 'react-redux'\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App'\nimport store from './redux/store'\n\n\nReactDOM.render(\n<Provider store={store}>\n<App />\n</Provider>\n    ,\n  \n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}